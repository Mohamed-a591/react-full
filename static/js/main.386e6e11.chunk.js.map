{"version":3,"sources":["samie.js","addusers.js","navbar.js","App.js","serviceWorker.js","index.js"],"names":["Samie","props","name","age","state","gnd","Users","kind","handlChange","e","setState","target","id","value","handelsubmit","preventDefault","console","log","onSubmit","this","htmlFor","type","onChange","Component","Navbar","className","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Lol","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oLAiBeA,G,MAdD,SAACC,GAAW,IAChBC,EAAuBD,EAAvBC,KAAOC,EAAgBF,EAAhBE,IAAMC,EAAUH,EAAVG,MAGnB,OACI,6BACI,yCAAgBF,EAAhB,OACA,wCAAgBC,EAAhB,OACA,wCAAeC,EAAf,OACA,iCAAQH,EAAMI,IAAd,Q,mCCuBGC,E,4MAhCXF,MAAQ,CACJF,KAAK,KACLC,IAAK,KACLI,KAAK,M,EAETC,YAAc,SAACC,GAEX,EAAKC,SAAL,eACKD,EAAEE,OAAOC,GAAMH,EAAEE,OAAOE,S,EAGjCC,aAAe,SAACL,GACZA,EAAEM,iBACFC,QAAQC,IAAI,EAAKb,Q,uDAGjB,OACI,6BACI,0BAAMc,SAAUC,KAAKL,cACjB,2BAAOM,QAAQ,QAAf,SACA,2BAAOC,KAAK,OAAOT,GAAG,OAAOU,SAAUH,KAAKX,cAC5C,2BAAOY,QAAQ,QAAf,QACA,2BAAOC,KAAK,OAAOT,GAAG,MAAMU,SAAUH,KAAKX,cAC3C,2BAAOY,QAAQ,QAAf,SACA,2BAAOC,KAAK,OAAOT,GAAG,OAAOU,SAAUH,KAAKX,cAC5C,gD,GA1BAe,aCuBLC,G,MAtBA,WACX,OACI,6BACI,yBAAKC,UAAU,uCACX,yBAAKA,UAAU,cACX,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,UACA,4BAAQD,UAAU,iBAAiBJ,KAAK,SAASM,cAAY,WAAWC,cAAY,sBAAsBC,gBAAc,qBAAqBC,gBAAc,QAAQC,aAAW,qBAC1K,0BAAMN,UAAU,yBAEpB,yBAAKA,UAAU,4BAA4Bb,GAAG,sBAC1C,yBAAKa,UAAU,uBACX,uBAAGA,UAAU,2BAA2BC,KAAK,KAA7C,QAAsD,0BAAMD,UAAU,WAAhB,cACtD,uBAAGA,UAAU,oBAAoBC,KAAK,KAAtC,YACA,uBAAGD,UAAU,oBAAoBC,KAAK,KAAtC,kBCEbM,MAbf,WACE,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOvB,KAAK,QAAQC,IAAI,KAAKC,MAAM,QACnC,kDACA,2CACA,kBAAC,EAAD,CAAOF,KAAK,UAAUC,IAAI,KAAKC,MAAM,OAAOC,IAAI,QAChD,kBAAC,EAAD,QCDc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,a","file":"static/js/main.386e6e11.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n//thear we use const instad of function\r\nconst Samie = (props) => {\r\n  const { name , age , state } = props; //this props that i pass it from the App.js\r\n    //this a esy method to use the props we can use the anther one like in the last \r\n    //in the function component we don't use \"this\" \r\n    return(\r\n        <div>\r\n            <div> Nmae:   { name  }   </div>\r\n            <div> Age:   {  age  }   </div>\r\n            <div> state: { state }   </div>\r\n            <div> { props.gnd } </div>  \r\n        </div>    \r\n    );\r\n}\r\n\r\nexport default Samie;\r\n\r\n\r\n//the same output \r\n/*import React, {Component} from 'react';\r\n\r\nclass Samie extends Component{\r\n    //\r\n    render(){\r\n        const { name , age , state } = this.props; //this props that i pass it from the App.js\r\n        //this a esy method to use the props we can use the anther one like in the last \r\n        return(\r\n            <div>\r\n               <div> Nmae:   { name  }   </div>\r\n                <div> Age:   {  age  }   </div>\r\n                <div> state: { state }   </div>\r\n                <div> { this.props.gnd } </div>  \r\n            </div>    \r\n        );\r\n    }\r\n}\r\nexport default Samie;*/","import React, { Component } from \"react\";\r\n\r\nclass Users extends Component{\r\n    state = {\r\n        name:null,\r\n        age: null,\r\n        kind:null\r\n    }\r\n    handlChange = (e) => {\r\n\r\n        this.setState({\r\n            [e.target.id] : e.target.value\r\n        })\r\n    }\r\n    handelsubmit = (e) =>{\r\n        e.preventDefault();\r\n        console.log(this.state);\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.handelsubmit} >\r\n                    <label htmlFor=\"name\">Name:</label>\r\n                    <input type=\"text\" id=\"name\" onChange={this.handlChange}/>\r\n                    <label htmlFor=\"name\">Age:</label>\r\n                    <input type=\"text\" id=\"age\" onChange={this.handlChange}/>\r\n                    <label htmlFor=\"name\">kind:</label>\r\n                    <input type=\"text\" id=\"kind\" onChange={this.handlChange}/>\r\n                    <button>submit</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Users;","import React from \"react\";\r\nimport './bootstrap.css' \r\n\r\nconst Navbar = () =>{\r\n    return(\r\n        <div>\r\n            <nav className=\"navbar navbar-expand-lg navbar-dark\">\r\n                <div className=\"container \">\r\n                    <a className=\"navbar-brand\" href=\"#\">Navbar</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse \" id=\"navbarNavAltMarkup\">\r\n                        <div className=\"navbar-nav ml-auto \">\r\n                            <a className=\"nav-item nav-link active\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\r\n                            <a className=\"nav-item nav-link\" href=\"#\">Features</a>\r\n                            <a className=\"nav-item nav-link\" href=\"#\">Pricing</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\nimport Samie from './samie' ;\nimport Users from './addusers';\nimport Navbar from \"./navbar\";\n\nfunction Lol() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Samie name=\"ahmed\" age=\"30\" state=\"bad\" />\n      <h1>My frist react App</h1>\n      <h2>welcome :) </h2>\n      <Samie name=\"mohamed\" age=\"25\" state=\"good\" gnd=\"nal\" />\n      <Users />\n    </div>\n  );\n}\n\nexport default Lol;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Lol from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Lol />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}